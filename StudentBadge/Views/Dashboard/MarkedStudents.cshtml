@using StudentBadge.Models
@{
    ViewData["Title"] = "Marked Students";
    Layout = null;
    
    var markedStudents = ViewBag.MarkedStudents as List<MarkedStudent>;
    var employerName = ViewBag.EmployerName;
    var companyName = ViewBag.CompanyName;
    var employerId = ViewBag.EmployerId;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marked Students - Student Badge</title>

    <!-- Add Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
    
    <style>
        body {
            margin: 0;
            font-family: 'Inter', sans-serif;
            height: 100vh;
            background: #fff6f1;
            display: flex;
        }

        .dashboard-container {
            display: flex;
            width: 100%;
        }

        .sidebar {
            width: 210px;
            background: linear-gradient(180deg, #8A2BE2, #7B1FA2);
            padding: 25px 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            box-shadow: 5px 0 15px rgba(0, 0, 0, 0.1);
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            overflow-y: auto;
            z-index: 100;
        }

        .logo {
            text-align: center;
            margin-bottom: 40px;
        }

       .logo img {
            width: 150px;
            transition: transform 0.3s ease;
        }
        
        .logo img:hover {
            transform: scale(1.05);
        }

        .logo h2 {
            font-size: 22px;
            font-weight: 700;
            margin: 10px 0 5px;
            color: #fff;
        }

        .logo p {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
        }

        .sidebar-link {
            display: flex;
            align-items: center;
            text-decoration: none;
            color: rgba(255, 255, 255, 0.85);
            font-size: 16px;
            font-weight: 600;
            padding: 12px 20px;
            margin: 8px 0;
            border-radius: 12px;
            width: 100%;
            transition: all 0.3s ease;
        }

        .sidebar-link i {
            margin-right: 12px;
            font-size: 18px;
        }

        .sidebar-link.active {
            background: #fff6f1;
            font-weight: bold;
                color: #8a2be2;
            box-shadow: inset 3px 3px 8px rgba(0, 0, 0, 0.05);
        }

        .sidebar-link:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.02);
            color: #fff;
        }

        .content {
            flex-grow: 1;
            padding: 25px;
            width: calc(100% - 240px);
            margin-left: 240px;
            max-height: 100vh;
            overflow-y: auto;
        }

        .content h1 {
            font-size: 24px;
            font-weight: 700;
                color: #8a2be2;
            margin-top: 0;
            margin-bottom: 15px;
        }

        .employer-info {
            background: #fff;
            padding: 15px 20px;
            border-radius: 12px;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.08);
            margin-bottom: 25px;
            border-top: 3px solid #8a2be2;
        }

        .employer-info h2 {
            font-size: 18px;
            margin-top: 0;
        }

        .section-heading {
            margin-bottom: 15px;
        }
        
        .section-heading h2 {
            font-size: 20px;
            font-weight: 700;
            color: #333;
            margin-bottom: 8px;
        }
        
        .section-heading p {
            color: #666;
            margin: 0;
        }

        .marked-students-container {
            padding: 20px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
            border-top: 4px solid #8a2be2;
        }
        
        .marked-students-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }
        
        .marked-students-table th {
            font-weight: 600;
            padding: 12px 15px;
            background: #f8f9fa;
            border-bottom: 2px solid #e0e0e0;
            color: #555;
            text-align: left;
        }
        
        .marked-students-table td {
            padding: 12px 15px;
            border-bottom: 1px solid #e0e0e0;
            vertical-align: middle;
        }
        
        .marked-students-table tr:hover {
            background-color: #fff6f1;
        }
        
        .student-info {
            display: flex;
            align-items: center;
        }
        
        .student-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 12px;
            object-fit: cover;
            border: 1px solid #e0e0e0;
        }
        
        .student-name {
            font-weight: 600;
            color: #333;
        }
        
        /* Badge styles */
        .badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            color: white;
            margin-left: 8px;
            display: inline-block;
        }
        
        .badge-platinum {
            background-color: #b9f2ff !important;
            color: #333 !important;
        }
        
        .badge-gold {
            background-color: #ffe34f !important;
            color: #333 !important;
        }
        
        .badge-silver {
            background-color: #cfcccc !important;
            color: #333 !important;
        }
        
        .badge-bronze {
            background-color: #f5b06c !important;
            color: #333 !important;
        }
        
        .badge-rising-star {
            background-color: #98fb98 !important;
            color: #333 !important;
        }
        
        .badge-warning {
            background-color: #ffcccb !important;
            color: #333 !important;
        }
        
        .notes-cell {
            position: relative;
            max-width: 200px;
        }
        
        .notes-display {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 170px;
            display: inline-block;
            font-style: italic;
            color: #666;
        }
        
        .edit-notes-btn {
            background: none;
            border: none;
            color: #8a2be2;
            cursor: pointer;
            padding: 2px 5px;
            border-radius: 4px;
            transition: background-color 0.2s ease;
        }
        
        .edit-notes-btn:hover {
            background-color: rgba(192, 57, 43, 0.1);
        }
        
        .action-buttons {
            white-space: nowrap;
        }
        
        .view-profile-btn, .unmark-student-btn {
            background: none;
            border: 1px solid;
            border-radius: 6px;
            padding: 6px 12px;
            font-size: 0.85rem;
            margin-right: 5px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .view-profile-btn {
            color: #2980b9;
            border-color: #2980b9;
        }
        
        .view-profile-btn:hover {
            background-color: #2980b9;
            color: white;
        }
        
        .unmark-student-btn {
            color: #8a2be2;
            border-color: #8a2be2;
        }
        
        .unmark-student-btn:hover {
                background-color: #8a2be2;
            color: white;
        }
        
        .no-marked-students {
            text-align: center;
            padding: 40px 0;
            background: #fff;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-top: 4px solid #8a2be2;
        }
        
        .no-marked-students p {
            font-size: 18px;
            color: #666;
            margin-bottom: 15px;
        }
        
        .btn-primary {
            background-color: #8a2be2;
            border-color: #8a2be2;
            padding: 8px 20px;
            font-weight: 600;
            border-radius: 8px;
            transition: all 0.2s ease;
        }
        
        .btn-primary:hover {
            background-color: #8a2be2;
                border-color: #8a2be2;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        /* Modal styles */
        .modal-content {
            border-radius: 15px;
            border: none;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        .modal-header {
            border-bottom: 2px solid #f1f1f1;
            padding: 15px 20px;
        }
        
        .modal-header .close {
            font-size: 1.5rem;
            opacity: 0.7;
        }
        
        .modal-title {
            font-weight: 700;
            color: #333;
        }
        
        .modal-body {
            padding: 20px;
        }
        
        .modal-footer {
            border-top: 2px solid #f1f1f1;
            padding: 15px 20px;
        }
        
        .form-group label {
            font-weight: 600;
            color: #555;
        }
        
        .form-control {
            border-radius: 8px;
            border: 1px solid #ddd;
            padding: 10px 15px;
        }
        
        .form-control:focus {
                border-color: #8a2be2;
            box-shadow: 0 0 0 0.2rem rgba(192, 57, 43, 0.25);
        }
        
        .btn-secondary {
            background-color: #6c757d;
            border-color: #6c757d;
        }
        
        /* Student profile styles */
        .student-profile {
            padding: 20px;
        }
        
        .profile-header {
            display: flex;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        
        .profile-picture {
            width: 110px;
            height: 110px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 25px;
            border: 3px solid #f8f9fa;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .profile-info h3 {
            margin: 0 0 8px 0;
            font-size: 22px;
            font-weight: 700;
            color: #333;
        }
        
        .profile-info p {
            margin: 0 0 8px 0;
            color: #666;
        }
        
        .profile-details {
            color: #333;
        }
        
        .detail-row {
            margin-bottom: 12px;
            display: flex;
        }
        
        .detail-label {
            font-weight: 600;
            width: 120px;
            color: #555;
        }
        
        .detail-value {
            flex: 1;
        }
        
        .grades-section, .resume-section {
            margin-top: 25px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }
        
        .grades-section h4 {
            margin-bottom: 15px;
            font-size: 18px;
            font-weight: 700;
            color: #333;
        }
        
        /* Responsive styles */
        @@media (max-width: 768px) {
            .sidebar {
                width: 70px;
                padding: 20px 10px;
            }
            
            .sidebar-link {
                padding: 12px 0;
                justify-content: center;
            }
            
            .sidebar-link i {
                margin-right: 0;
                font-size: 20px;
            }
            
            .sidebar-link span {
                display: none;
            }
            
            .logo h2, .logo p {
                display: none;
            }
            
            .content {
                width: calc(100% - 70px);
                margin-left: 70px;
                padding: 15px;
            }
            
            .profile-header {
                flex-direction: column;
                text-align: center;
            }
            
            .profile-picture {
                margin-right: 0;
                margin-bottom: 15px;
            }
            
            .detail-row {
                flex-direction: column;
            }
            
            .detail-label {
                width: 100%;
                margin-bottom: 5px;
            }
        }
        
        /* Alert styles */
        .alert {
            border-radius: 8px;
            padding: 12px 15px;
            margin-bottom: 20px;
            border: none;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border-left: 4px solid #28a745;
        }
        
        /* Mobile menu trigger */
        @@media (max-width: 576px) {
            .mobile-menu-trigger {
                display: block;
            }
            
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }
            
            .sidebar.show {
                transform: translateX(0);
            }
            
            .content {
                width: 100%;
                margin-left: 0;
            }
        }

        /* Add this CSS to make the certificates section scrollable */
        .certificates-list {
            max-height: 250px;
            overflow-y: auto;
            margin-top: 10px;
        }

        .challenges-list, .comments-list, .seminars-list, .certificates-list {
            max-height: 250px;
            overflow-y: auto;
        }

        /* Add style for challenge items */
        .challenge-item {
            background: white;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .challenge-item h4 {
            margin: 0 0 10px 0;
            color: #333;
            font-weight: bold;
        }
        
        .challenge-item p {
            margin: 5px 0;
            color: #666;
        }
        
        .challenge-item strong {
            color: #333;
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <button class="mobile-menu-trigger" id="menuToggle">
        <i class="fas fa-bars"></i>
    </button>

    <div class="dashboard-container">
        <div class="sidebar" id="sidebar">
            <div class="logo">
                <img src="/images/student1.png" alt="Student Badge Logo" onerror="this.src='/images/blank.jpg';">
                <h2>Student Badge</h2>
                <p>Employer Portal</p>
            </div>

            <a href="/Dashboard/EmployerDashboard" class="sidebar-link">
                <i class="fas fa-home"></i>
                <span>Dashboard</span>
            </a>
            <a href="/Dashboard/MarkedStudents" class="sidebar-link active">
                <i class="fas fa-bookmark"></i>
                <span>Marked Students</span>
            </a>
            <a href="/Dashboard/EmployerProfile" class="sidebar-link">
                <i class="fas fa-user"></i>
                <span>Profile</span>
            <a href="/Home/Login" class="sidebar-link">
                    <i class="fas fa-sign-out-alt"></i> Log Out
                </a>
            </a>
        </div>

        <div class="content">
            <h1>Marked Students</h1>
            
            <div class="employer-info">
                <h2>@employerName</h2>
                <p>@companyName</p>
            </div>

            <div class="section-heading">
                <h2>Students You've Marked</h2>
                <p>These are the students you've marked as potential candidates.</p>
            </div>

            @if (markedStudents == null || !markedStudents.Any())
            {
                <div class="no-marked-students">
                    <p>You haven't marked any students yet.</p>
                    <a href="/Dashboard/EmployerDashboard" class="btn btn-primary">Go to Student List</a>
                </div>
            }
            else
            {
                <div class="marked-students-container">
                    <table class="marked-students-table">
                        <thead>
                            <tr>
                                <th>Student</th>
                                <th>Course & Section</th>
                                <th>Score</th>
                                <th>Badge</th>
                                <th>Date Marked</th>
                                <th>Notes</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var student in markedStudents)
                            {
                                <tr data-student-id="@student.StudentId">
                                    <td class="student-info">
                                        <img src="/images/blank.jpg" alt="@student.StudentName" class="student-avatar" onerror="this.src='/images/blank.jpg'" />
                                        <span class="student-name">@student.StudentName</span>
                                    </td>
                                    <td>@student.Course - @student.Section</td>
                                    <td>@student.Score.ToString("F2")</td>
                                    <td>
                                        <span class="badge @(student.BadgeColor.ToLower() == "platinum" ? "badge-platinum" : 
                                                            student.BadgeColor.ToLower() == "gold" ? "badge-gold" : 
                                                            student.BadgeColor.ToLower() == "silver" ? "badge-silver" : 
                                                            student.BadgeColor.ToLower() == "bronze" ? "badge-bronze" : 
                                                            student.BadgeColor.ToLower() == "rising-star" ? "badge-rising-star" : 
                                                            "badge-warning")">
                                            @student.BadgeColor
                                        </span>
                                    </td>
                                    <td>@student.DateMarked.ToString("MMM dd, yyyy")</td>
                                    <td class="notes-cell">
                                        <div class="notes-display">@(string.IsNullOrEmpty(student.Notes) ? "-" : student.Notes)</div>
                                        <button class="edit-notes-btn" data-student-id="@student.StudentId">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                    </td>
                                    <td class="action-buttons">
                                        <button class="view-profile-btn" data-student-id="@student.StudentId">
                                            <i class="fas fa-eye"></i> View
                                        </button>
                                        <button class="unmark-student-btn" data-student-id="@student.StudentId">
                                            <i class="fas fa-times"></i> Unmark
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <!-- Student Profile Modal -->
    <div class="modal fade" id="studentProfileModal" tabindex="-1" role="dialog" aria-labelledby="studentProfileModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="studentProfileModalLabel">Student Profile</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="studentProfileContent">
                    <!-- Student profile content will be loaded here -->
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Notes Modal -->
    <div class="modal fade" id="editNotesModal" tabindex="-1" role="dialog" aria-labelledby="editNotesModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editNotesModalLabel">Edit Notes</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="editNotesForm" onsubmit="return false;">
                        <input type="hidden" id="noteStudentId" name="studentId" />
                        <div class="form-group">
                            <label for="notesText">Notes</label>
                            <textarea class="form-control" id="notesText" name="notes" rows="4" placeholder="Add your notes about this student here..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveNotesBtn">Save Notes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Image Modal for Certificates and Proofs -->
    <div class="modal fade" id="imageModal" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="imageModalTitle">Image</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <img id="modalImage" style="max-width:100%; max-height:80vh;" alt="Modal Image">
                </div>
            </div>
        </div>
    </div>

    <!-- Resume View Modal -->
    <div id="resumeViewModal" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Student Resume</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeResumeView()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body p-0" style="height: 80vh;">
                    <iframe id="resumeViewFrame" style="width:100%; height:100%; border:none;"></iframe>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // IMPORTANT: These functions must be defined outside of jQuery ready function
        // to be accessible from onclick attributes in the HTML
        
        // Function to open edubadge certificate for students
        function openEdubadgeCertificate(studentId, studentName) {
            // Open the certificate page in a new tab
            window.open(`/ProgrammingTest/ViewEduBadgeCertificate?studentId=${studentId}`, '_blank');
        }
        
        // Function to view resume in modal
        function viewResumeInModal(studentId) {
            console.log("viewResumeInModal called with studentId:", studentId);
            
            // Validate student ID - use the current student ID from the global variable if not provided
            if (!studentId && window.currentStudentId) {
                console.log("Using global currentStudentId:", window.currentStudentId);
                studentId = window.currentStudentId;
            }
            
            if (!studentId) {
                console.error("Cannot view resume: No valid studentId available");
                alert("Error: Could not determine which student's resume to view");
                return;
            }
            
            // Set the iframe source to the resume URL
            const resumeFrame = document.getElementById('resumeViewFrame');
            if (!resumeFrame) {
                console.error("Resume iframe element not found");
                return;
            }
            
            const resumeUrl = `/FileHandler/GetResume?studentId=${studentId}`;
            console.log("Setting resume URL:", resumeUrl);
            resumeFrame.src = resumeUrl;
            
            // Show the modal
            $('#resumeViewModal').modal('show');
        }
        
        // Function to close resume modal
        function closeResumeView() {
            $('#resumeViewModal').modal('hide');
            // Clear the iframe source to stop any audio or video that might be playing
            document.getElementById('resumeViewFrame').src = '';
        }
        
        // Function to get student profile image with proper fallback
        function getStudentProfileImageUrl(studentId) {
            if (!studentId) return '/images/blank.jpg';
            return `/FileHandler/GetProfilePicture?studentId=${studentId}&t=${new Date().getTime()}`;
        }
        
        // Function to open certificate modal
        function openCertificateModal(certificateId, title) {
            document.getElementById('imageModalTitle').textContent = title + ' Certificate';
            document.getElementById('modalImage').src = '/images/loading.gif';
            $('#imageModal').modal('show');
            
            // Set fixed dimensions
            const modalImage = document.getElementById('modalImage');
            if (modalImage) {
                modalImage.style.width = '800px';
                modalImage.style.maxWidth = '95%';
                modalImage.style.height = 'auto';
                modalImage.style.objectFit = 'contain';
                modalImage.style.margin = '0 auto';
                modalImage.style.display = 'block';
            }
            
            // Use timeout to ensure modal is visible before loading image
            setTimeout(() => {
                const src = `/ProgrammingTest/ViewCertificate/${certificateId}`;
                document.getElementById('modalImage').src = src;
            }, 100);
        }
        
        // Function to open attendance proof modal
        function openAttendanceProofModal(attendanceId, title) {
            document.getElementById('imageModalTitle').textContent = title + ' Attendance Proof';
            document.getElementById('modalImage').src = '/images/loading.gif';
            $('#imageModal').modal('show');
            
            // Set fixed dimensions
            const modalImage = document.getElementById('modalImage');
            if (modalImage) {
                modalImage.style.width = '800px';
                modalImage.style.maxWidth = '95%';
                modalImage.style.height = 'auto';
                modalImage.style.objectFit = 'contain';
                modalImage.style.margin = '0 auto';
                modalImage.style.display = 'block';
            }
            
            // Use timeout to ensure modal is visible before loading image
            setTimeout(() => {
                const src = `/Teacher/ViewAttendanceProof?id=${attendanceId}`;
                document.getElementById('modalImage').src = src;
            }, 100);
        }
        
        // Function to open extracurricular proof modal
        function openExtraCurricularProofModal(activityId, title) {
            document.getElementById('imageModalTitle').textContent = title + ' Activity Proof';
            document.getElementById('modalImage').src = '/images/loading.gif';
            $('#imageModal').modal('show');
            
            // Set fixed dimensions
            const modalImage = document.getElementById('modalImage');
            if (modalImage) {
                modalImage.style.width = '800px';
                modalImage.style.maxWidth = '95%';
                modalImage.style.height = 'auto';
                modalImage.style.objectFit = 'contain';
                modalImage.style.margin = '0 auto';
                modalImage.style.display = 'block';
            }
            
            // Use timeout to ensure modal is visible before loading image
            setTimeout(() => {
                const src = `/Teacher/ViewExtraCurricularProofImage?activityId=${activityId}`;
                document.getElementById('modalImage').src = src;
            }, 100);
        }
        
        $(document).ready(function() {
            // Initialize global studentId tracking
            window.currentStudentId = null;
            
            // Mobile menu toggle
            $('#menuToggle').click(function() {
                $('#sidebar').toggleClass('show');
            });
            
            // Fix profile pictures for all student avatars in the list
            $('.student-avatar').each(function() {
                const studentId = $(this).closest('tr').data('student-id');
                if (studentId) {
                    $(this).attr('src', getStudentProfileImageUrl(studentId));
                } else {
                    $(this).attr('src', '/images/blank.jpg');
                }
            });
            
            // Load fresh data from server
            function refreshMarkedStudentsData() {
                $.ajax({
                    url: '/Dashboard/GetMarkedStudents',
                    type: 'GET',
                    success: function(response) {
                        if (response.success && response.markedStudents) {
                            // If we got data successfully, refresh the page to show latest data
                            // We'll use this approach if the UI gets out of sync with the database
                            if (response.markedStudents.length !== @(markedStudents?.Count ?? 0)) {
                                window.location.href = '/Dashboard/MarkedStudents';
                            }
                        }
                    }
                });
            }
            
            // Refresh the data when page loads and every 30 seconds
            refreshMarkedStudentsData();
            setInterval(refreshMarkedStudentsData, 30000); // Check every 30 seconds
            
            // Prevent any form submission that might cause page refresh
            $('#editNotesForm').on('submit', function(e) {
                e.preventDefault();
                return false;
            });
            
            // View student profile
            $('.view-profile-btn').click(function() {
                const studentId = $(this).data('student-id');
                
                // Store the current student ID in a global variable for later use
                window.currentStudentId = studentId;
                console.log("Opening profile for student ID:", studentId);
                
                $('#studentProfileModal').modal('show');
                
                // Load student profile data
                $.ajax({
                    url: '/Dashboard/GetStudentProfileForEmployer',
                    type: 'GET',
                    data: { studentId: studentId },
                    success: function(response) {
                        if (response.success) {
                            // Display student profile
                            displayStudentProfile(response.student);
                            
                            // Need to wait for elements to be created before trying to update them
                            setTimeout(function() {
                                // Load additional profile data
                                loadStudentProfile(studentId);
                                // Load student challenges data
                                loadStudentChallenges(studentId);
                                
                                // Call the loadScoreBreakdown with proper studentId
                                $.ajax({
                                    url: '/Score/GetStudentScoreBreakdown',
                                    type: 'GET',
                                    data: { studentId: studentId },
                                    success: function(data) {
                                        console.log("Score breakdown data:", data);
                                        
                                        if (data.success) {
                                            // Process successful data response
                                            updateScoreBreakdown(data);
                                        } else {
                                            console.log("Score breakdown failed, trying fallback API:", data.message);
                                            // Try fallback from dashboard API
                                            $.ajax({
                                                url: '/Dashboard/GetStudentScore',
                                                type: 'GET',
                                                data: { studentId: studentId },
                                                success: function(fallbackData) {
                                                    console.log("Fallback score data:", fallbackData);
                                                    if (fallbackData && fallbackData.success) {
                                                        console.log('Using fallback data from Dashboard API');
                                                        $('#academicGradesScore').text(formatScore(fallbackData.academicScore));
                                                        $('#challengesScore').text(formatScore(fallbackData.challengesScore));
                                                        $('#masteryScore').text(formatScore(fallbackData.masteryScore));
                                                        $('#seminarsScore').text(formatScore(fallbackData.seminarsScore));
                                                        $('#extracurricularScore').text(formatScore(fallbackData.extracurricularScore));
                                                        $('#totalScore').text(formatScore(fallbackData.score));
                                                        
                                                        // Update badge color
                                                        updateBadgeColor(fallbackData.score);
                                                        
                                                        // Update ranking text
                                                        updateRankingText(fallbackData.score);
                                                    } else {
                                                        // Try getting score data from the student data we already have
                                                        setDefaultScoreValues(response.student);
                                                    }
                                                },
                                                error: function() {
                                                    // Try getting score data from the student data we already have
                                                    setDefaultScoreValues(response.student);
                                                }
                                            });
                                        }
                                    },
                                    error: function(error) {
                                        console.error('Error fetching score breakdown:', error);
                                        // Try getting score data from the student data we already have
                                        setDefaultScoreValues(response.student);
                                    }
                                });
                                
                                // Set profile image with cache-busting
                                $('.profile-picture img').attr('src', getStudentProfileImageUrl(studentId));
                                $('.profile-picture img').on('error', function() {
                                    $(this).attr('src', '/images/blank.jpg');
                                });
                            }, 100);
                        } else {
                            $('#studentProfileContent').html('<div class="alert alert-danger">' + response.message + '</div>');
                        }
                    },
                    error: function() {
                        $('#studentProfileContent').html('<div class="alert alert-danger">Error loading student profile.</div>');
                    }
                });
            });
            
            // Fixed scrolling issue on modals
            $('#imageModal').on('shown.bs.modal', function() {
                $('body').addClass('modal-open');
            });
            
            // Ensure body scrolling is restored when modal is closed
            $('#imageModal').on('hidden.bs.modal', function() {
                $('body').removeClass('modal-open');
                $('body').css('padding-right', '');
            });
            
            // Unmark student
            $('.unmark-student-btn').click(function() {
                const studentId = $(this).data('student-id');
                const row = $(this).closest('tr');
                
                if (confirm('Are you sure you want to unmark this student?')) {
                    $.ajax({
                        url: '/Dashboard/UnmarkStudent',
                        type: 'POST',
                        data: { studentId: studentId },
                        success: function(response) {
                            if (response.success) {
                                // Remove student from table
                                row.fadeOut(400, function() {
                                    $(this).remove();
                                    
                                    // If no more students, show "no marked students" message
                                    if ($('.marked-students-table tbody tr').length === 0) {
                                        $('.marked-students-container').replaceWith(
                                            '<div class="no-marked-students">' +
                                            '<p>You haven\'t marked any students yet.</p>' +
                                            '<a href="/Dashboard/EmployerDashboard" class="btn btn-primary">Go to Student List</a>' +
                                            '</div>'
                                        );
                                    }
                                });
                            } else {
                                alert(response.message);
                            }
                        },
                        error: function() {
                            alert('Error unmarking student. Please try again.');
                        }
                    });
                }
            });
            
            // Edit notes
            $('.edit-notes-btn').click(function() {
                const studentId = $(this).data('student-id');
                const notes = $(this).closest('td').find('.notes-display').text();
                
                $('#noteStudentId').val(studentId);
                $('#notesText').val(notes === '-' ? '' : notes);
                $('#editNotesModal').modal('show');
            });
            
            // Save notes
            $('#saveNotesBtn').click(function() {
                const studentId = $('#noteStudentId').val();
                const notes = $('#notesText').val();
                
                $.ajax({
                    url: '/Dashboard/MarkStudent',
                    type: 'POST',
                    data: { 
                        studentId: studentId,
                        notes: notes
                    },
                    success: function(response) {
                        if (response.success) {
                            // Update notes in the table without page refresh
                            $('tr[data-student-id="' + studentId + '"] .notes-display').text(notes || '-');
                            $('#editNotesModal').modal('hide');
                            
                            // Show success message
                            const successAlert = $('<div class="alert alert-success alert-dismissible fade show" role="alert">')
                                .text('Notes updated successfully')
                                .append('<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>')
                                .prependTo('.content');
                                
                            // Auto-dismiss after 3 seconds
                            setTimeout(function() {
                                successAlert.alert('close');
                            }, 3000);
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function() {
                        alert('Error saving notes. Please try again.');
                    }
                });
                
                // Prevent default form submission that would cause a page refresh
                return false;
            });
            
            // Function to format score with percentage
            function formatScore(score) {
                if (score === null || score === undefined || isNaN(parseFloat(score))) {
                    return '0.00%';
                }
                return parseFloat(score).toFixed(2) + '%';
            }
            
            // Function to load additional student profile data
            function loadStudentProfile(studentId) {
                // Reset content sections
                $('#studentCertificates').html('<p>Loading certificate data...</p>');
                $('#studentSeminars').html('<p>Loading seminar data...</p>');
                $('#studentExtracurricular').html('<p>Loading extracurricular activities...</p>');
                
                // Load all student data
                loadStudentCertificates(studentId);
                loadStudentSeminars(studentId);
                loadStudentExtracurricular(studentId);
            }
            
            // Function to load student challenges data
            function loadStudentChallenges(studentId) {
                if (!studentId) {
                    console.error("Cannot load challenges: studentId is undefined");
                    if (window.currentStudentId) {
                        console.log("Using currentStudentId from window:", window.currentStudentId);
                        studentId = window.currentStudentId;
                    } else {
                        var challengesContainer = document.getElementById('studentChallenges');
                        if (challengesContainer) {
                            challengesContainer.innerHTML = '<p>Error loading challenges: Student ID not found.</p>';
                        }
                        return;
                    }
                }
                
                console.log("Loading challenges for student ID:", studentId);
                
                $.ajax({
                    url: '/Dashboard/GetStudentChallenges',
                    type: 'GET',
                    data: { studentId: studentId },
                    success: function(data) {
                        console.log("Student challenges data received:", data);
                        var challengesContainer = document.getElementById('studentChallenges');
                        
                        if (!challengesContainer) {
                            console.error('studentChallenges container not found');
                            return;
                        }
                        
                        // Handle empty or null data
                        if (!data || (Array.isArray(data) && data.length === 0)) {
                            challengesContainer.innerHTML = '<p>No completed challenges found.</p>';
                            return;
                        }
                        
                        try {
                            var html = '<div class="challenges-list">';
                            data.forEach(function(challenge) {
                                // Handle property name variations between API responses
                                const challengeName = challenge.ChallengeName || challenge.challengeName || 'Unnamed Challenge';
                                const language = challenge.ProgrammingLanguage || challenge.programmingLanguage || 'Not specified';
                                const score = challenge.PercentageScore || challenge.percentageScore || 0;
                                const date = challenge.SubmissionDate || challenge.submissionDate || 'Not specified';
                                const description = challenge.Description || challenge.description || '';
                                
                                html += `
                                    <div class="challenge-item">
                                        <h4>${challengeName}</h4>
                                        <p><strong>Language:</strong> ${language}</p>
                                        <p><strong>Score:</strong> ${score}%</p>
                                        <p><strong>Completed:</strong> ${date}</p>
                                        <p>${description}</p>
                                    </div>
                                `;
                            });
                            html += '</div>';
                            
                            challengesContainer.innerHTML = html;
                        } catch (error) {
                            console.error('Error rendering challenges HTML:', error);
                            challengesContainer.innerHTML = '<p>Error displaying challenges. Please try again later.</p>';
                        }
                    },
                    error: function(error) {
                        console.error('Error fetching challenges from API:', error);
                        var challengesContainer = document.getElementById('studentChallenges');
                        if (challengesContainer) {
                            challengesContainer.innerHTML = '<p>Error loading challenges. Please try again later.</p>';
                        }
                    }
                });
            }
            
            // Function to load and display student certificates
            function loadStudentCertificates(studentId) {
                if (!studentId) {
                    console.error("Cannot load certificates: studentId is undefined");
                    if (window.currentStudentId) {
                        console.log("Using currentStudentId from window:", window.currentStudentId);
                        studentId = window.currentStudentId;
                    } else {
                        var container = document.getElementById('studentCertificates');
                        if (container) {
                            container.innerHTML = '<p>Error loading certificates: Student ID not found.</p>';
                        }
                        return;
                    }
                }
                
                console.log("Loading certificates for student ID:", studentId);
                
                $.ajax({
                    url: '/ProgrammingTest/GetStudentCertificates',
                    type: 'GET',
                    data: { studentId: studentId },
                    success: function(data) {
                        console.log("Student certificates data received:", data);
                        const container = document.getElementById('studentCertificates');
                        
                        if (!container) {
                            console.error('studentCertificates container not found');
                            return;
                        }
                        
                        if (!data || data.length === 0) {
                            container.innerHTML = '<p>No certificates available.</p>';
                            return;
                        }
                        
                        try {
                            let html = '<div class="certificates-list">';
                            data.forEach(cert => {
                                const testName = cert.testName || 'Unnamed Test';
                                const language = cert.programmingLanguage || 'Not specified';
                                const score = cert.score || 0;
                                const issueDate = cert.issueDate ? new Date(cert.issueDate).toLocaleDateString() : 'Unknown date';
                                const certificateId = cert.certificateId || 0;
                                
                                html += `
                                    <div class="certificate-item">
                                        <div class="cert-icon"><i class="fas fa-certificate" style="color: gold;"></i></div>
                                        <div class="cert-details">
                                            <div class="cert-name">${testName}</div>
                                            <div class="cert-info">
                                                <span class="cert-lang">${language}</span>
                                                <span class="cert-score">Score: ${score}%</span>
                                                <span class="cert-date">Issued: ${issueDate}</span>
                                            </div>
                                            <div class="cert-actions">
                                                <button class="btn btn-sm btn-primary view-cert-btn" 
                                                        onclick="openCertificateModal(${certificateId}, '${testName.replace(/'/g, "\\'")}')">
                                                    View Certificate
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                `;
                            });
                            html += '</div>';
                            
                            container.innerHTML = html;
                        } catch (error) {
                            console.error('Error rendering certificates HTML:', error);
                            container.innerHTML = '<p>Error displaying certificates. Please try again later.</p>';
                        }
                    },
                    error: function(error) {
                        console.error('Error fetching certificates from API:', error);
                        var certContainer = document.getElementById('studentCertificates');
                        if (certContainer) {
                            certContainer.innerHTML = '<p>Error loading certificates. Please try again later.</p>';
                        }
                    }
                });
            }
            
            // Function to load and display student seminars
            function loadStudentSeminars(studentId) {
                $.ajax({
                    url: '/Dashboard/GetStudentAttendanceRecords',
                    type: 'GET',
                    data: { studentId: studentId },
                    success: function(data) {
                        console.log("Student seminar data:", data);
                        const container = $('#studentSeminars');
                        
                        if (!data || data.length === 0) {
                            container.html('<p>No seminar or webinar attendance records available.</p>');
                            return;
                        }
                        
                        let html = '<div class="seminars-list">';
                        data.forEach(record => {
                            html += `
                                <div class="seminar-item">
                                    <div class="seminar-icon"><i class="fas fa-chalkboard-teacher"></i></div>
                                    <div class="seminar-details">
                                        <div class="seminar-name">${record.eventName}</div>
                                        <div class="seminar-desc">${record.eventDescription || ''}</div>
                                        <div class="seminar-info">
                                            <span class="seminar-date">Date: ${new Date(record.eventDate).toLocaleDateString()}</span>
                                            <span class="seminar-teacher">Verified by: ${record.teacherName || 'Teacher'}</span>
                                            <span class="seminar-score">Score: ${formatScore(record.score)}</span>
                                        </div>
                                        <div class="seminar-actions">
                                            ${record.hasProofImage ? 
                                            `<button class="btn btn-sm btn-primary view-proof-btn" 
                                                    onclick="openAttendanceProofModal(${record.attendanceId}, '${record.eventName}')">
                                                View Proof
                                            </button>` : 
                                            `<span class="badge bg-secondary">No proof available</span>`}
                                        </div>
                                    </div>
                                </div>
                            `;
                        });
                        html += '</div>';
                        
                        container.html(html);
                    },
                    error: function(error) {
                        console.error('Error fetching student seminar records:', error);
                        $('#studentSeminars').html('<p>Unable to load seminar data.</p>');
                    }
                });
            }
            
            // Function to load and display extracurricular activities
            function loadStudentExtracurricular(studentId) {
                $.ajax({
                    url: '/Dashboard/GetStudentExtraCurricularRecords',
                    type: 'GET',
                    data: { studentId: studentId },
                    success: function(data) {
                        console.log("Student extracurricular data:", data);
                        const container = $('#studentExtracurricular');
                        
                        if (!data || data.length === 0) {
                            container.html('<p>No extracurricular activities found.</p>');
                            return;
                        }
                        
                        let html = '<div class="seminars-list">'; // Using the same CSS class for consistent styling
                        data.forEach(activity => {
                            html += `
                                <div class="seminar-item">
                                    <div class="seminar-icon"><i class="fas fa-trophy"></i></div>
                                    <div class="seminar-details">
                                        <div class="seminar-name">${activity.activityName}</div>
                                        <div class="seminar-desc">${activity.activityDescription || ''}</div>
                                        <div class="seminar-info">
                                            <span class="seminar-date">Date: ${new Date(activity.activityDate).toLocaleDateString()}</span>
                                            <span class="seminar-teacher">Category: ${activity.activityCategory}</span>
                                            <span class="seminar-teacher">Verified by: ${activity.teacherName}</span>
                                            <span class="seminar-score">Score: ${formatScore(activity.score)}</span>
                                        </div>`;
                        
                            if (activity.hasProofImage) {
                                html += `
                                    <div class="seminar-actions">
                                        <button class="btn btn-sm btn-primary view-proof-btn" 
                                                onclick="openExtraCurricularProofModal(${activity.activityId}, '${activity.activityName}')">
                                            View Proof
                                        </button>
                                    </div>`;
                            }
                            
                            html += `
                                    </div>
                                </div>`;
                        });
                        html += '</div>';
                        
                        container.html(html);
                    },
                    error: function(error) {
                        console.error('Error fetching extracurricular activities:', error);
                        $('#studentExtracurricular').html('<p>Error loading extracurricular activities. Please try again later.</p>');
                    }
                });
            }
            
            // Function to update score breakdown with data
            function updateScoreBreakdown(data) {
                // Extract scores from the nested structure
                const scores = data.scores || {};
                
                // Get the raw scores from the scores object
                let academicScore = 0;
                let challengesScore = 0;
                let masteryScore = 0;
                let seminarsScore = 0;
                let extracurricularScore = 0;
                
                // Check if we have the new nested structure format
                if (scores.academic && typeof scores.academic === 'object') {
                    academicScore = parseFloat(scores.academic.percentage) || 0;
                    
                    // Retrieve challenges score
                    if (scores.challenges && scores.challenges.percentage !== null) {
                        challengesScore = parseFloat(scores.challenges.percentage);
                    } else if (data.challengesScore !== undefined) {
                        challengesScore = parseFloat(data.challengesScore);
                    }
                    
                    masteryScore = parseFloat(scores.mastery.percentage) || 0;
                    seminarsScore = parseFloat(scores.seminars.percentage) || 0;
                    extracurricularScore = parseFloat(scores.extracurricular.percentage) || 0;
                } 
                // Fallback to old format
                else {
                    const details = data.details || {};
                    academicScore = parseFloat(details.academicScore) || 0;
                    challengesScore = parseFloat(details.challengesScore || data.challengesScore || data.completedChallengesScore) || 0;
                    masteryScore = parseFloat(details.masteryScore) || 0;
                    seminarsScore = parseFloat(details.seminarsScore) || 0;
                    extracurricularScore = parseFloat(details.extracurricularScore) || 0;
                }
                
                // Format scores and update UI elements using jQuery
                $('#academicGradesScore').text(formatScore(academicScore));
                $('#challengesScore').text(formatScore(challengesScore));
                $('#masteryScore').text(formatScore(masteryScore));
                $('#seminarsScore').text(formatScore(seminarsScore));
                $('#extracurricularScore').text(formatScore(extracurricularScore));
                
                // Get current score for overall
                let currentScore = 0;
                if (data.overall && typeof data.overall === 'object') {
                    currentScore = parseFloat(data.overall.percentage) || 0;
                } else {
                    currentScore = parseFloat(data.currentScore || data.totalScore) || 0;
                }
                
                // Update total score
                $('#totalScore').text(formatScore(currentScore));
                
                // Update badge color
                updateBadgeColor(currentScore);
                
                // Show challenge stats if available
                if (data.completedChallenges !== undefined && data.totalAvailableChallenges !== undefined) {
                    if (data.totalAvailableChallenges > 0) {
                        $('#completedChallenges').text(data.completedChallenges);
                        $('#totalChallenges').text(data.totalAvailableChallenges);
                        $('.challenge-stats').show();
                    }
                }
                
                // Update ranking text
                updateRankingText(currentScore);
            }
            
            // Function to update badge color based on score
            function updateBadgeColor(score) {
                const badgeElement = $('.badge-color');
                if (badgeElement.length) {
                    let badgeColor = "needs";
                    if (score >= 95) badgeColor = "platinum";
                    else if (score >= 85) badgeColor = "gold";
                    else if (score >= 75) badgeColor = "silver";
                    else if (score >= 65) badgeColor = "bronze";
                    else if (score >= 50) badgeColor = "rising-star";
                    else if (score >= 1) badgeColor = "needs";
                    else badgeColor = "none";
                    
                    badgeElement.text(`Badge: ${badgeColor}`);
                    badgeElement.css('backgroundColor', 
                        badgeColor === 'platinum' ? '#b9f2ff' : 
                        badgeColor === 'gold' ? '#ffe34f' : 
                        badgeColor === 'silver' ? '#cfcccc' : 
                        badgeColor === 'bronze' ? '#f5b06c' : 
                        badgeColor === 'rising-star' ? '#98fb98' : 
                        badgeColor === 'needs' ? '#ffcccb' :
                        '#f8f9fa'); // none
                }
            }
            
            // Function to update ranking text based on score
            function updateRankingText(score) {
                let rankingText = "";
                if (score >= 90) rankingText = "top 10%";
                else if (score >= 80) rankingText = "top 25%";
                else if (score >= 70) rankingText = "top 50%";
                else rankingText = "below average";
                $('#studentRanking').text(rankingText);
            }
            
            // Function to set default values when no score data is available
            function setDefaultScoreValues(student) {
                console.log("Using student data for fallback score values:", student);
                // Use the Score property from the student object if available
                const score = student.Score || 0;
                
                // Set all scores to display values
                $('#academicGradesScore').text(formatScore(score * 0.3)); // 30% academic weight
                $('#challengesScore').text(formatScore(score * 0.2));     // 20% challenges weight
                $('#masteryScore').text(formatScore(score * 0.2));        // 20% mastery weight
                $('#seminarsScore').text(formatScore(score * 0.1));       // 10% seminars weight
                $('#extracurricularScore').text(formatScore(score * 0.2)); // 20% extracurricular weight
                $('#totalScore').text(formatScore(score));
                
                // Update badge color and ranking
                updateBadgeColor(score);
                updateRankingText(score);
            }
            
            // Function to display student profile in modal - Updated to match EmployerDashboard
            function displayStudentProfile(student) {
                // Ensure we have a valid student object
                if (!student) {
                    console.error("Cannot display profile: student object is undefined");
                    $('#studentProfileContent').html('<div class="alert alert-danger">Error: Student data not available</div>');
                    return;
                }

                // Ensure studentId is available and store it globally
                if (!student.StudentId) {
                    console.error("Student object doesn't have a StudentId property");
                    student.StudentId = window.currentStudentId || "";
                }
                
                // Store the current student ID globally for later use
                window.currentStudentId = student.StudentId;
                console.log("Setting current student ID:", window.currentStudentId);
                
                // Debug log the entire student object to check for other missing properties
                console.log("Student object being displayed:", student);
                
                const profileHtml = `
                    <div class="student-profile-container">
                        <div class="profile-header">
                            <div class="profile-picture">
                                <img src="/FileHandler/GetProfilePicture?studentId=${student.StudentId}" alt="${student.FullName}" class="profile-picture" onerror="this.src='/images/blank.jpg'">
                            </div>
                            <div class="profile-info">
                                <h3>${student.FullName}</h3>
                                <p>${student.Course} - ${student.Section}</p>
                                <div class="score-badge">Score: ${student.Score ? student.Score.toFixed(2) : '0'}</div>
                            </div>
                        </div>
                        
                        <div class="profile-body">
                            <!-- Left Column - Academic Information -->
                            <div class="academic-column">
                                <!-- Academic Performance -->
                                <div class="stats-section">
                                    <h3>Academic Performance</h3>
                                    <div class="score-panel">
                                        <div class="badge-color" style="
                                            background-color: ${student.BadgeColor === 'platinum' ? '#b9f2ff' : 
                                                              student.BadgeColor === 'gold' ? '#ffe34f' : 
                                                              student.BadgeColor === 'silver' ? '#cfcccc' : 
                                                              student.BadgeColor === 'bronze' ? '#f5b06c' : 
                                                              student.BadgeColor === 'rising-star' ? '#98fb98' : 
                                                              '#ffcccb'};
                                            color: #333;
                                            padding: 8px 15px;
                                            border-radius: 15px;
                                            font-weight: 600;
                                            margin-bottom: 10px;
                                            display: inline-block;
                                        ">Badge: ${student.BadgeColor || 'Warning'}</div>
                                        <p>This student's performance is ranked in the 
                                            <span id="studentRanking">
                                                ${student.Score >= 90 ? 'top 10%' : 
                                                  student.Score >= 80 ? 'top 25%' :
                                                  student.Score >= 70 ? 'top 50%' :
                                                  'below average'}
                                            </span> category.
                                        </p>
                                    </div>
                                </div>
                                
                                <!-- Score Breakdown -->
                                <div class="scoring-breakdown-section">
                                    <h3>Score Breakdown</h3>
                                    <div class="score-breakdown-table">
                                        <table class="table table-striped">
                                            <thead>
                                                <tr>
                                                    <th>Category</th>
                                                    <th>Score</th>
                                                    <th>Weight</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>Academic Grades</td>
                                                    <td id="academicGradesScore">-</td>
                                                    <td>30%</td>
                                                </tr>
                                                <tr>
                                                    <td>Coding Challenges/Projects</td>
                                                    <td id="challengesScore">-</td>
                                                    <td>20%</td>
                                                </tr>
                                                <tr>
                                                    <td>Skill Mastery</td>
                                                    <td id="masteryScore">-</td>
                                                    <td>20%</td>
                                                </tr>
                                                <tr>
                                                    <td>Seminars & Webinars</td>
                                                    <td id="seminarsScore">-</td>
                                                    <td>10%</td>
                                                </tr>
                                                <tr>
                                                    <td>Extra-Curricular Involvement</td>
                                                    <td id="extracurricularScore">-</td>
                                                    <td>20%</td>
                                                </tr>
                                                <tr class="total-row">
                                                    <td><strong>Total Score</strong></td>
                                                    <td id="totalScore" colspan="2"><strong>-</strong></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="challenge-stats" style="margin-top: 15px; display: none;">
                                        <p>Completed <span id="completedChallenges">0</span> out of <span id="totalChallenges">0</span> available challenges</p>
                                    </div>
                                </div>
                                
                                <!-- Grades Section -->
                                <div class="grades-section">
                                    <h3>Academic Grades</h3>
                                    <div class="grade-details">
                                        <div class="grade-table">
                                            <div class="grade-row">
                                                <div class="grade-label">First Year:</div>
                                                <div class="grade-value" id="FirstYearGrade">${student.FirstYearGrade || '-'}</div>
                                            </div>
                                            <div class="grade-row">
                                                <div class="grade-label">Second Year:</div>
                                                <div class="grade-value" id="SecondYearGrade">${student.SecondYearGrade || '-'}</div>
                                            </div>
                                            <div class="grade-row">
                                                <div class="grade-label">Third Year:</div>
                                                <div class="grade-value" id="ThirdYearGrade">${student.ThirdYearGrade || '-'}</div>
                                            </div>
                                            <div class="grade-row">
                                                <div class="grade-label">Fourth Year:</div>
                                                <div class="grade-value" id="FourthYearGrade">${student.FourthYearGrade || '-'}</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Right Column - Achievements and Activities -->
                            <div class="achievements-column">
                                <!-- Achievements Section -->
                                <div class="achievements-section">
                                    <h3>Achievements</h3>
                                    <div class="achievements-list">
                                        ${student.Achievements ? 
                                            (() => {
                                                const achievementsList = student.Achievements.split(/[,\n|]+/).filter(a => a.trim() !== "");
                                                if (achievementsList.length > 0) {
                                                    let html = '<ul class="achievements-list">';
                                                    achievementsList.forEach(achievement => {
                                                        html += `<li><i class="fas fa-trophy" style="color: gold; margin-right: 8px;"></i>${achievement.trim()}</li>`;
                                                    });
                                                    html += '</ul>';
                                                    return html;
                                                } else {
                                                    return '<p>No specific achievements listed.</p>';
                                                }
                                            })() : 
                                            '<p>No achievements listed yet.</p>'
                                        }
                                    </div>
                                </div>
                                
                                <!-- Teacher Comments Section -->
                                <div class="comments-section">
                                    <h3>Teacher Comments</h3>
                                    <div class="comments-list">
                                        ${student.Comments ? 
                                            (() => {
                                                const commentsList = student.Comments.split('|').filter(c => c.trim() !== "");
                                                if (commentsList.length > 0) {
                                                    let html = '';
                                                    commentsList.forEach(comment => {
                                                        html += `<p><i class="fas fa-comment" style="color: #4CAF50; margin-right: 8px;"></i>${comment.trim()}</p>`;
                                                    });
                                                    return html;
                                                } else {
                                                    return '<p>No comments available.</p>';
                                                }
                                            })() : 
                                            '<p>No teacher comments yet.</p>'
                                        }
                                    </div>
                                </div>
                                
                                <!-- Completed Challenges Section -->
                                <div class="challenges-section">
                                    <h3>Completed Challenges</h3>
                                    <div id="studentChallenges" class="challenges-list">
                                        <p>Loading challenges data...</p>
                                    </div>
                                </div>
                                
                                <!-- Mastery Section -->
                                <div class="mastery-section">
                                    <h3>Mastery (Tests and Certificates)</h3>
                                    <div id="studentCertificates">
                                        <p>Loading certificate data...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Bottom Section - Extra Activities -->
                        <div class="additional-info">
                            <!-- Seminar/Webinar Section -->
                            <div class="seminar-section">
                                <h3>Seminars & Webinars</h3>
                                <div id="studentSeminars" class="seminar-details">
                                    <div class="loading-seminars">Loading...</div>
                                </div>
                            </div>
                            
                            <!-- Extracurricular Section -->
                            <div class="extracurricular-section">
                                <h3>Extracurricular Activities</h3>
                                <div id="studentExtracurricular">
                                    <p>Loading extracurricular activities...</p>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Resume Section -->
                        ${student.IsResumeVisible && student.Resume ? `
                        <div class="resume-section" style="margin-top: 20px;">
                            <h3>Resume</h3>
                            <p><i class="fas fa-file-alt" style="color: #4CAF50; margin-right: 8px;"></i>Resume is available for viewing</p>
                            <div class="action-buttons">
                                <button type="button" class="btn btn-primary" onclick="viewResumeInModal('${student.StudentId}')">
                                    <i class="fas fa-file"></i> View Resume
                                </button>
                            </div>
                        </div>
                        ` : ''}
                        
                        <!-- EduBadge Certificate Section -->
                        ${student.FourthYearGrade ? `
                        <div class="resume-section" style="margin-top: 20px;">
                            <h3>EduBadge Certificate</h3>
                            <p><i class="fas fa-award" style="color: #4CAF50; margin-right: 8px;"></i>EduBadge certificate is available</p>
                            <div class="action-buttons">
                                <button type="button" class="btn btn-primary" onclick="openEdubadgeCertificate('${student.StudentId}', '${student.FullName.replace(/'/g, "\\'")}')">
                                    <i class="fas fa-award"></i> View Certificate
                                </button>
                            </div>
                        </div>
                        ` : ''}
                    </div>
                `;
                
                $('#studentProfileContent').html(profileHtml);
                
                // Add CSS to make the profile display correctly
                const profileStyles = `
                <style>
                    .student-profile-container {
                        padding: 0;
                    }
                    
                    .profile-header {
                        display: flex;
                        align-items: center;
                        margin-bottom: 25px;
                        padding-bottom: 20px;
                        border-bottom: 1px solid #eee;
                    }
                    
                    .profile-picture {
                        width: 110px;
                        height: 110px;
                        border-radius: 50%;
                        object-fit: cover;
                        margin-right: 25px;
                        border: 3px solid #f8f9fa;
                        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                    }
                    
                    .profile-info h3 {
                        margin: 0 0 8px 0;
                        font-size: 22px;
                        font-weight: 700;
                        color: #333;
                    }
                    
                    .profile-info p {
                        margin: 0 0 8px 0;
                        color: #666;
                    }
                    
                    .profile-body {
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 20px;
                    }
                    
                    .academic-column, .achievements-column {
                        display: flex;
                        flex-direction: column;
                        gap: 20px;
                    }
                    
                    .stats-section, .scoring-breakdown-section, .grades-section,
                    .achievements-section, .challenges-section, .comments-section,
                    .mastery-section, .seminar-section, .extracurricular-section {
                        background-color: #fff;
                        border-radius: 8px;
                        padding: 15px;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                        margin-bottom: 15px;
                    }
                    
                    .stats-section h3, .scoring-breakdown-section h3, .grades-section h3,
                    .achievements-section h3, .challenges-section h3, .comments-section h3,
                    .mastery-section h3, .seminar-section h3, .extracurricular-section h3,
                    .resume-section h3 {
                        color: #444;
                        font-size: 18px;
                        margin-top: 0;
                        margin-bottom: 15px;
                        padding-bottom: 8px;
                        border-bottom: 1px solid #eee;
                    }
                    
                    .grade-table {
                        background-color: #fff;
                        border-radius: 8px;
                        padding: 15px;
                    }
                    
                    .grade-row {
                        display: flex;
                        justify-content: space-between;
                        padding: 8px 0;
                        border-bottom: 1px solid #eee;
                    }
                    
                    .grade-row:last-child {
                        border-bottom: none;
                    }
                    
                    .grade-label {
                        font-weight: bold;
                        color: #555;
                    }
                    
                    .grade-value {
                        color: #333;
                    }
                    
                    .challenges-list, .comments-list, .seminars-list {
                        max-height: 250px;
                        overflow-y: auto;
                    }
                    
                    .challenge-item, .seminar-item, .certificate-item {
                        background: white;
                        padding: 15px;
                        margin-bottom: 10px;
                        border-radius: 6px;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }
                    
                    .challenge-item h4, .seminar-name, .cert-name {
                        margin: 0 0 10px 0;
                        color: #333;
                        font-weight: bold;
                    }
                    
                    .challenge-item p, .seminar-desc {
                        margin: 5px 0;
                        color: #666;
                    }
                    
                    .challenge-item strong, .seminar-info span, .cert-info span {
                        color: #333;
                        margin-right: 10px;
                    }
                    
                    .achievements-list ul {
                        list-style: none;
                        padding: 0;
                    }
                    
                    .achievements-list li {
                        margin-bottom: 8px;
                    }
                    
                    .additional-info {
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 20px;
                        margin-top: 20px;
                    }
                    
                    .seminar-item, .certificate-item {
                        display: flex;
                    }
                    
                    .seminar-icon, .cert-icon {
                        font-size: 24px;
                        margin-right: 15px;
                        color: #4CAF50;
                    }
                    
                    .seminar-details, .cert-details {
                        flex: 1;
                    }
                    
                    .seminar-info, .cert-info {
                        display: flex;
                        flex-wrap: wrap;
                        margin: 10px 0;
                        font-size: 0.9em;
                    }
                    
                    .seminar-actions, .cert-actions {
                        margin-top: 10px;
                    }
                    
                    @@media (max-width: 768px) {
                        .profile-body, .additional-info {
                            grid-template-columns: 1fr;
                        }
                        
                        .profile-header {
                            flex-direction: column;
                            text-align: center;
                        }
                        
                        .profile-picture {
                            margin-right: 0;
                            margin-bottom: 15px;
                        }
                        
                        .seminar-info, .cert-info {
                            flex-direction: column;
                        }
                        
                        .seminar-info span, .cert-info span {
                            margin-bottom: 5px;
                        }
                    }
                </style>
                `;
                
                $('#studentProfileContent').append(profileStyles);
            }
        });
    </script>
</body>
</html>