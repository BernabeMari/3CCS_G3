@model List<StudentBadge.Models.Challenge>
@{
    Layout = null;
    int yearLevel = ViewBag.StudentYearLevel ?? 0;
    string studentId = ViewBag.StudentId;
    string yearName = "";
    
    switch (yearLevel)
    {
        case 1: yearName = "1st Year"; break;
        case 2: yearName = "2nd Year"; break;
        case 3: yearName = "3rd Year"; break;
        case 4: yearName = "4th Year"; break;
        case 5: yearName = "Graduate"; break;
        default: yearName = "All Years"; break;
    }
    
    // Group challenges by year level
    var challengesByYear = Model
        .GroupBy(c => c.YearLevel)
        .OrderBy(g => g.Key)
        .ToDictionary(g => g.Key, g => g.ToList());
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Available Challenges - Student Portal</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    
    <style>
        body {
            margin: 0;
            font-family: 'Inter', sans-serif;
            height: 100vh;
            background: #fff6f1;
            display: flex;
            overflow: hidden;
        }

        .dashboard-container {
            display: flex;
            width: 100%;
            overflow: hidden;
        }

        /* Sidebar styles */
        .sidebar {
            width: 210px !important;
            background: linear-gradient(180deg, #8A2BE2, #7B1FA2);
            padding: 25px 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            box-shadow: 5px 0 15px rgba(0, 0, 0, 0.1);
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            overflow-y: auto;
            z-index: 100;
        }

        .logo {
            text-align: center;
            margin-bottom: 40px;
        }

        .logo img {
            width: 150px;
            transition: transform 0.3s ease;
        }
        
        .logo img:hover {
            transform: scale(1.05);
        }

        .logo h2 {
            font-size: 22px;
            font-weight: 700;
            margin: 10px 0 5px;
            color: #fff;
        }

        .logo p {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
        }

        .sidebar-link {
            display: flex;
            align-items: center;
            text-decoration: none;
            color: rgba(255, 255, 255, 0.85);
            font-size: 16px;
            font-weight: 600;
            padding: 12px 20px;
            margin: 8px 0;
            border-radius: 12px;
            width: 100%;
            transition: all 0.3s ease;
        }

        .sidebar-link i {
            margin-right: 12px;
            font-size: 18px;
        }

        .sidebar-link.active {
            background: #fff6f1;
            font-weight: bold;
                color: #8a2be2;
            box-shadow: inset 3px 3px 8px rgba(0, 0, 0, 0.05);
        }

        .sidebar-link:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.02);
            color: #fff;
        }

        .content {
            flex-grow: 1;
            padding: 25px;
            width: calc(100% - 240px);
            margin-left: 240px;
            max-height: 100vh;
            overflow-y: auto;
        }

        .content h1 {
            font-size: 24px;
            font-weight: 700;
                color: #8a2be2;
            margin-top: 0;
            margin-bottom: 15px;
        }

        .btn-primary {
            background-color: #8a2be2;
            border-color: #8a2be2;
        }

        .btn-primary:hover {
                background-color: #8a2be2;
                border-color: #8a2be2;
        }

        .card {
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.05);
            margin-bottom: 20px;
            overflow: hidden;
            border: none;
        }

        .card-header {
            background-color: #fff;
            border-bottom: 1px solid #f0f0f0;
            padding: 15px 20px;
        }

        .card-body {
            padding: 20px;
        }

        .badge {
            font-weight: 500;
            padding: 5px 10px;
            border-radius: 20px;
        }

        .badge-info {
            background-color: #3498db;
        }

        .badge-success {
            background-color: #2ecc71;
        }

        .badge-warning {
            background-color: #f1c40f;
            color: #000;
        }

        .badge-danger {
            background-color: #e74c3c;
        }

        .badge-secondary {
            background-color: #7f8c8d;
        }

        .year-level-badge {
            display: inline-block;
            padding: 6px 12px;
            background: #8a2be2;
            color: white;
            border-radius: 20px;
            font-weight: 600;
            font-size: 14px;
            margin-left: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .challenge-card {
            transition: all 0.3s ease;
            border-left: 4px solid #8a2be2;
        }

        .challenge-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .challenge-info {
            margin-top: 15px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .challenge-info-item {
            font-size: 14px;
            color: #555;
            display: flex;
            align-items: center;
        }

        .challenge-info-item i {
            margin-right: 5px;
                color: #8a2be2;
        }

        .challenge-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 15px;
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            background: #fff6f1;
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.05);
        }

        .empty-state i {
            font-size: 48px;
            color: #e0e0e0;
            margin-bottom: 15px;
        }

        .empty-state h3 {
            font-size: 18px;
            color: #555;
            margin-bottom: 10px;
        }

        .empty-state p {
            color: #888;
            margin-bottom: 20px;
        }

        .points-badge {
            position: absolute;
            top: 15px;
            right: 15px;
            background: #ffeee9;
            color: #8a2be2;
            padding: 5px 10px;
            border-radius: 15px;
            font-weight: 600;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">
                <img src="~/images/student1.png" alt="EduBadge Logo">
                <h2>EduBadge</h2>
                <p>Student Portal</p>
            </div>
            
            <a href="/Dashboard/StudentDashboard" class="sidebar-link">
                <i class="fas fa-th-large"></i> Dashboard
            </a>
            
            <a href="/Dashboard/StudentProfile" class="sidebar-link">
                <i class="fas fa-user"></i> Profile
            </a>
            
            <a href="/ProgrammingTest/AvailableTests" class="sidebar-link">
                <i class="fas fa-tasks"></i> Available Tests
            </a>
            
            <a href="/ProgrammingTest/StudentTests" class="sidebar-link">
                <i class="fas fa-code"></i> Completed Tests
            </a>
            
            <a href="/Challenge/AvailableChallenges" class="sidebar-link active">
                <i class="fas fa-trophy"></i> Challenges
            </a>
            
            <a href="/Challenge/CompletedChallenges" class="sidebar-link">
                <i class="fas fa-check-circle"></i> Completed Challenges
            </a>
            
            <a href="/ProgrammingTest/Certificates" class="sidebar-link">
                <i class="fas fa-award"></i> My Certificates
            </a>
            
            <a href="/Home/Login" class="sidebar-link">
                <i class="fas fa-sign-out-alt"></i> Log Out
            </a>
        </div>
        
        <!-- Main Content -->
        <div class="content">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Available Challenges <span class="year-level-badge"><i class="fas fa-graduation-cap me-2"></i>@yearName</span></h1>
                <span class="text-muted"><i class="fas fa-info-circle me-1"></i> All challenges are available to all students</span>
            </div>
            
            @if (TempData["Debug"] != null)
            {
                <div class="card mb-4 border-info">
                    <div class="card-body bg-info-subtle d-flex align-items-center">
                        <i class="fas fa-bug text-info me-3 fs-4"></i>
                        <div class="flex-grow-1">
                            <h5 class="card-title text-info mb-0">Debug Info</h5>
                            <p class="card-text mb-0">@TempData["Debug"]</p>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                </div>
            }
            
            @if (TempData["Success"] != null)
            {
                <div class="card mb-4 border-success">
                    <div class="card-body bg-success-subtle d-flex align-items-center">
                        <i class="fas fa-check-circle text-success me-3 fs-4"></i>
                        <div class="flex-grow-1">
                            <h5 class="card-title text-success mb-0">Success</h5>
                            <p class="card-text mb-0">@TempData["Success"]</p>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                </div>
            }
            
            @if (TempData["Error"] != null)
            {
                <div class="card mb-4 border-danger">
                    <div class="card-body bg-danger-subtle d-flex align-items-center">
                        <i class="fas fa-exclamation-circle text-danger me-3 fs-4"></i>
                        <div class="flex-grow-1">
                            <h5 class="card-title text-danger mb-0">Error</h5>
                            <p class="card-text mb-0">@TempData["Error"]</p>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                </div>
            }
            
            @if (Model != null && Model.Any())
            {
                @foreach (var yearGroup in challengesByYear)
                {
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h4 class="mb-0">
                                <i class="fas fa-graduation-cap me-2"></i>
                                @if (string.IsNullOrEmpty(yearGroup.Key))
                                {
                                    <span>Uncategorized Challenges</span>
                                }
                                else
                                {
                                    <span>@yearGroup.Key</span>
                                }
                                <span class="badge bg-secondary ms-2">@yearGroup.Value.Count challenges</span>
                            </h4>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                @foreach (var challenge in yearGroup.Value)
                                {
                                    <div class="col-md-6 col-lg-4 mb-4">
                                        <div class="card challenge-card">
                                            <div class="card-body">
                                                <div class="points-badge">
                                                    <i class="fas fa-star"></i> @challenge.Questions.Sum(q => q.Points) Points
                                                </div>
                                                <h5 class="card-title">
                                                    @challenge.ChallengeName
                                                    <span class="badge bg-primary ms-2">
                                                        <i class="fas fa-clock"></i> Available
                                                    </span>
                                                </h5>
                                                <span class="badge bg-@GetLanguageBadgeColor(challenge.ProgrammingLanguage)">
                                                    <i class="@GetLanguageIcon(challenge.ProgrammingLanguage)"></i> @challenge.ProgrammingLanguage
                                                </span>
                                                
                                                <p class="card-text mt-2">
                                                    @(string.IsNullOrEmpty(challenge.Description) ? "No description" : 
                                                        (challenge.Description.Length > 100 ? challenge.Description.Substring(0, 100) + "..." : challenge.Description))
                                                </p>
                                                
                                                <div class="challenge-info">
                                                    <div class="challenge-info-item">
                                                        <i class="fas fa-question-circle"></i> @(challenge.Questions?.Count ?? 0) Questions
                                                    </div>
                                                    <div class="challenge-info-item">
                                                        <i class="fas fa-calendar-alt"></i> @challenge.CreatedDate.ToString("MMM dd, yyyy")
                                                    </div>
                                                    @if (challenge.ExpirationDate.HasValue)
                                                    {
                                                        <div class="challenge-info-item">
                                                            <i class="fas fa-hourglass-end"></i> Expires: @challenge.ExpirationDate.Value.ToString("MMM dd, yyyy HH:mm")
                                                        </div>
                                                    }
                                                </div>
                                                
                                                <div class="challenge-actions">
                                                    @{
                                                        bool isCompleted = ((Dictionary<int, bool>)ViewBag.CompletedChallenges).ContainsKey(challenge.ChallengeId) && 
                                                                           ((Dictionary<int, bool>)ViewBag.CompletedChallenges)[challenge.ChallengeId];
                                                    }
                                                    
                                                    @if (isCompleted)
                                                    {
                                                        <a class="btn btn-secondary disabled" aria-disabled="true">
                                                            <i class="fas fa-check-circle"></i> Already Completed
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <a href="/Challenge/TakeChallenge/@challenge.ChallengeId" class="btn btn-primary">
                                                            <i class="fas fa-trophy"></i> Take Challenge
                                                        </a>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-trophy"></i>
                    <h3>No Available Challenges</h3>
                    <p>There are currently no available challenges, or you have completed all challenges.</p>
                </div>
            }
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        $(document).ready(function() {
            // Make card-style alerts dismissible
            $('.btn-close').on('click', function() {
                $(this).closest('.card').fadeOut();
            });
            
            // Auto-dismiss card alerts after 5 seconds
            setTimeout(function() {
                $('.card.border-success, .card.border-danger').fadeOut();
            }, 5000);
            
            // Debug button - double click
            $('body').on('dblclick', function(e) {
                if (e.ctrlKey && e.shiftKey) {
                    var debugPanel = $('<div class="debug-panel"></div>');
                    debugPanel.css({
                        position: 'fixed',
                        bottom: '10px',
                        right: '10px',
                        background: '#f8f9fa',
                        border: '1px solid #ddd',
                        padding: '10px',
                        borderRadius: '5px',
                        zIndex: 9999,
                        boxShadow: '0 0 10px rgba(0,0,0,0.1)'
                    });
                    
                    var tools = [
                        { name: "Test Challenge Submission", url: "/Challenge/TestChallengeSubmission" },
                        { name: "Check Schema", url: "/Challenge/CheckChallengeSubmissionsSchema" },
                        { name: "Ensure Table", url: "/Challenge/EnsureChallengeSubmissionsTable" },
                        { name: "Diagnose User IDs", url: "/Challenge/DiagnoseUserIds" },
                        { name: "Examine DB Schema", url: "/Challenge/ExamineDbSchema" }
                    ];
                    
                    var html = '<h6>Debug Tools</h6><ul style="list-style:none;padding-left:0">';
                    tools.forEach(function(tool) {
                        html += '<li><a href="' + tool.url + '" target="_blank">' + tool.name + '</a></li>';
                    });
                    html += '</ul><button class="btn btn-sm btn-secondary mt-2 close-debug">Close</button>';
                    
                    debugPanel.html(html);
                    
                    if ($('.debug-panel').length === 0) {
                        $('body').append(debugPanel);
                        
                        $('.close-debug').click(function() {
                            $('.debug-panel').remove();
                        });
                    }
                }
            });
        });
    </script>
</body>
</html>

@functions {
    private string GetLanguageBadgeColor(string language)
    {
        switch (language?.ToLower())
        {
            case "visual basic":
                return "secondary";
            case "html/css":
                return "danger";
            case "python":
                return "primary";
            case "javascript":
                return "warning";
            case "php":
                return "info";
            case "c":
                return "dark";
            case "c#":
                return "success";
            default:
                return "secondary";
        }
    }
    
    private string GetLanguageIcon(string language)
    {
        switch (language?.ToLower())
        {
            case "visual basic":
                return "fab fa-microsoft";
            case "html/css":
                return "fab fa-html5";
            case "python":
                return "fab fa-python";
            case "javascript":
                return "fab fa-js";
            case "php":
                return "fab fa-php";
            case "c":
                return "fas fa-code";
            case "c#":
                return "fab fa-microsoft";
            default:
                return "fas fa-code";
        }
    }
} 