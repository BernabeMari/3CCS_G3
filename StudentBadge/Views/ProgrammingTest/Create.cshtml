@model StudentBadge.Models.ProgrammingTest
@{
    Layout = null;
    // Pre-define languages for easier handling
    var languages = new[] { "Visual Basic", "HTML/CSS", "Python", "JavaScript", "PHP", "C", "C#", "MySQL" };
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Programming Test - Teacher Portal</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    
    <style>
        body {
            margin: 0;
            font-family: 'Inter', sans-serif;
            height: 100vh;
            background: #fff6f1;
            display: flex;
            overflow: hidden;
        }

        .dashboard-container {
            display: flex;
            width: 100%;
            overflow: hidden;
        }

        /* Sidebar styles */
        .sidebar {
            width: 210px !important;
            background: linear-gradient(180deg, #8A2BE2, #7B1FA2);
            padding: 25px 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            box-shadow: 5px 0 15px rgba(0, 0, 0, 0.1);
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            overflow-y: auto;
            z-index: 100;
        }

        .logo {
            text-align: center;
            margin-bottom: 40px;
        }

       .logo img {
            width: 150px;
            transition: transform 0.3s ease;
        }
        
        .logo img:hover {
            transform: scale(1.05);
        }
        .logo h2 {
            font-size: 22px;
            font-weight: 700;
            margin: 10px 0 5px;
            color: #fff;
        }

        .logo p {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.8);
            font-weight: 500;
        }

        .sidebar-link {
            display: flex;
            align-items: center;
            text-decoration: none;
            color: rgba(255, 255, 255, 0.85);
            font-size: 16px;
            font-weight: 600;
            padding: 12px 20px;
            margin: 8px 0;
            border-radius: 12px;
            width: 100%;
            transition: all 0.3s ease;
        }

        .sidebar-link i {
            margin-right: 12px;
            font-size: 18px;
        }

        .sidebar-link.active {
            background: #fff6f1;
            font-weight: bold;
                color: #8a2be2;
            box-shadow: inset 3px 3px 8px rgba(0, 0, 0, 0.05);
        }

        .sidebar-link:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.02);
            color: #fff;
        }

        .content {
            flex-grow: 1;
            padding: 25px;
            width: calc(100% - 240px);
            margin-left: 240px;
            max-height: 100vh;
            overflow-y: auto;
        }

        .content h1 {
            font-size: 24px;
            font-weight: 700;
                color: #8a2be2;
            margin-top: 0;
            margin-bottom: 15px;
        }

        .btn-primary {
            background-color: #8a2be2;
            border-color: #8a2be2;
        }

        .btn-primary:hover {
                background-color: #8a2be2;
                border-color: #8a2be2;
        }

        .card {
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.05);
            margin-bottom: 20px;
            border: none;
            background-color: white;
        }

        .card-header {
            background-color: #fff;
            border-bottom: 1px solid #f0f0f0;
            padding: 15px 20px;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
        }

        .card-body {
            padding: 20px;
        }

        .form-label {
            font-weight: 600;
            color: #555;
            margin-bottom: 8px;
            font-size: 15px;
        }

        .form-control, .form-select {
            border-radius: 8px;
            padding: 10px 15px;
            border: 1px solid #ddd;
            transition: all 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
                border-color: #8a2be2;
            box-shadow: 0 0 0 0.25rem rgba(231, 76, 60, 0.25);
        }

        .text-muted {
            color: #888 !important;
            font-size: 13px;
        }

        .btn-back {
            color: #555;
            text-decoration: none;
        }

        .btn-back:hover {
                color: #8a2be2;
        }

        .form-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">
                <img src="~/images/student1.png" alt="School Logo" style="width: 80px; height: auto;">
                <h2>EduBadge</h2>
                <p>Teacher Portal</p>
            </div>
            
            <a href="/Teacher/Dashboard" class="sidebar-link">
                <i class="fas fa-th-large"></i> Dashboard
            </a>
            <a href="#" class="sidebar-link active">
                <i class="fas fa-code"></i> Programming Tests
            </a>    
            <a href="/Challenge/Index" class="sidebar-link">
                <i class="fas fa-trophy"></i> Challenges
            </a>
            <a href="/PendingCertificates" class="sidebar-link">
                <i class="fas fa-certificate"></i> Verify Certificates
            </a>

            <a href="/Home/Login" class="sidebar-link">
                <i class="fas fa-sign-out-alt"></i> Log Out
            </a>
        </div>
        
        <!-- Main Content -->
        <div class="content">
            <div class="form-header">
                <h1>Create Programming Test</h1>
            </div>
            
            <div class="card">
                <div class="card-body">
                    <form action="/ProgrammingTest/Create" method="post">
                        <div class="text-danger mb-3">
                            @if (!ViewData.ModelState.IsValid)
                            {
                                <div class="validation-summary-errors">
                                    <ul>
                                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                        {
                                            <li>@error.ErrorMessage</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                        
                        <!-- Add hidden field for TeacherId -->
                        <input type="hidden" name="TeacherId" value="@Context.Session.GetString("TeacherId")" />
                        
                        <div class="mb-3">
                            <label for="TestName" class="form-label">Test Name</label>
                            <input type="text" id="TestName" name="TestName" class="form-control" value="@(Model?.TestName)" required />
                            @if (ViewData.ModelState["TestName"]?.Errors.Count > 0)
                            {
                                <span class="text-danger">@string.Join(", ", ViewData.ModelState["TestName"].Errors.Select(e => e.ErrorMessage))</span>
                            }
                        </div>
                        
                        <div class="mb-3">
                            <label for="ProgrammingLanguage" class="form-label">Programming Language</label>
                            <select id="ProgrammingLanguage" name="ProgrammingLanguage" class="form-select" required>
                                <option value="">-- Select Language --</option>
                                @foreach (var lang in languages)
                                {
                                    if (Model?.ProgrammingLanguage == lang)
                                    {
                                        <option value="@lang" selected>@lang</option>
                                    }
                                    else
                                    {
                                        <option value="@lang">@lang</option>
                                    }
                                }
                            </select>
                            @if (ViewData.ModelState["ProgrammingLanguage"]?.Errors.Count > 0)
                            {
                                <span class="text-danger">@string.Join(", ", ViewData.ModelState["ProgrammingLanguage"].Errors.Select(e => e.ErrorMessage))</span>
                            }
                            <small class="text-muted">Select the programming language for this test.</small>
                        </div>
                        
                        <div class="mb-3">
                            <label for="Description" class="form-label">Description</label>
                            <textarea id="Description" name="Description" class="form-control" rows="4">@(Model?.Description)</textarea>
                            @if (ViewData.ModelState["Description"]?.Errors.Count > 0)
                            {
                                <span class="text-danger">@string.Join(", ", ViewData.ModelState["Description"].Errors.Select(e => e.ErrorMessage))</span>
                            }
                            <small class="text-muted">Provide a brief description or instructions for this test.</small>
                        </div>
                        
                        <div class="mb-3">
                            <label for="YearLevel" class="form-label">Year Level</label>
                            <select id="YearLevel" name="YearLevel" class="form-select" required>
                                <option value="">-- Select Year Level --</option>
                                <option value="1" selected="@(Model?.YearLevel == 1)">1st Year</option>
                                <option value="2" selected="@(Model?.YearLevel == 2)">2nd Year</option>
                                <option value="3" selected="@(Model?.YearLevel == 3)">3rd Year</option>
                                <option value="4" selected="@(Model?.YearLevel == 4)">4th Year</option>
                            </select>
                            @if (ViewData.ModelState["YearLevel"]?.Errors.Count > 0)
                            {
                                <span class="text-danger">@string.Join(", ", ViewData.ModelState["YearLevel"].Errors.Select(e => e.ErrorMessage))</span>
                            }
                            <small class="text-muted">Select the year level this test is intended for.</small>
                        </div>
                        
                        <div class="mb-3 form-check">
                            <input type="checkbox" id="IsActive" name="IsActive" class="form-check-input" value="true" @(Model?.IsActive == true ? "checked" : "") />
                            <input type="hidden" name="IsActive" value="false" />
                            <label for="IsActive" class="form-check-label">Active</label>
                            <small class="text-muted d-block">Inactive tests will not be available to students.</small>
                        </div>
                        
                        <div class="mb-3">
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle"></i> You'll be able to add questions to your test after creating it.
                            </div>
                        </div>
                        
                        <!-- Hidden field to ensure Questions is not null -->
                        <input type="hidden" name="Questions" value="[]" />
                        
                        <div class="d-flex justify-content-end gap-2">
                            <a href="/ProgrammingTest" class="btn btn-secondary">
                                <i class="fas fa-times"></i> Cancel
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Create Test
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html> 